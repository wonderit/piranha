# -*- coding: utf-8 -*-
"""train_resnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ABY48-UAjltSOtMYgbxUPWI6sS_BQ-Yq
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import numpy as np
import pandas as pd
import cv2
from tqdm import tqdm
from sklearn.model_selection import train_test_split
from torchvision.utils import make_grid

"""## Lets get the data, model and setup trainig code"""


# APPLYING GAUSSIAN BLUR NOISE FILTER
# This function will act as a filter for the image data
def load_colorfilter(image, img_width, sigmaX=10):
    # image = cv2.imread(path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    # image = crop_image_from_gray(image)
    # image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))
    image = cv2.addWeighted(image, 4, cv2.GaussianBlur(image, (0, 0), sigmaX), -4, img_width)
    return image



print('data loading ... ')
image_width = 32

# DR Dataset
dataset19 = pd.read_csv('../files/DR/labels/trainLabels19.csv')
print(dataset19)

# Importing Data 2015
dataset15 = pd.read_csv('../files/DR/labels/trainLabels15.csv')
dataset15.columns = ['id_code', 'diagnosis']

# Balancing Data
level_0 = dataset19[dataset19.diagnosis == 0].sample(n=900)
level_2 = dataset19[dataset19.diagnosis == 2].sample(n=900)

level_1 = dataset15[dataset15.diagnosis == 1].sample(n=530)
level_3 = dataset15[dataset15.diagnosis == 3].sample(n=707)
level_4 = dataset15[dataset15.diagnosis == 4].sample(n=605)

dataset19 = dataset19[dataset19['diagnosis'] > 0]
dataset19 = dataset19[dataset19['diagnosis'] != 2]
print(dataset19['diagnosis'].value_counts())

dataset19 = pd.concat([level_0, level_2, dataset19])
dataset19 = dataset19.sample(frac=1)
print(dataset19['diagnosis'].value_counts())

dataset15 = pd.concat([level_1, level_3, level_4])
dataset15 = dataset15.sample(frac=1)

print(dataset15['diagnosis'].value_counts())

# IMPORTING SELECTED IMAGES FROM THE DATASET
# RESIZING THE IMPORTING DATA
images = []
for i, image_id in enumerate(tqdm(dataset19.id_code)):
    im = cv2.imread(f'../files/DR/resized train 19/{image_id}.jpg')
    im = cv2.resize(im, (image_width, image_width))
    images.append(im)

for i, image_id in enumerate(tqdm(dataset15.id_code)):
    im = cv2.imread(f'../files/DR/resized train 15/{image_id}.jpg')
    im = cv2.resize(im, (image_width, image_width))
    images.append(im)

for i in range(len(images)):
    output = load_colorfilter(images[i], image_width)
    images[i] = output

images = np.array(images)
print('shape of images: ', images.shape)

# VISUALIZING BALANCED DATASET
dataset = pd.concat([dataset19, dataset15])
print(dataset['diagnosis'].value_counts())

# SCALING/NORMALISING IMAGE DATASET
X = images / 255.0
y = dataset.diagnosis.values

X, X_test, y, y_test = train_test_split(X, y, test_size=0.1, stratify=y)

class DRDataset(torch.utils.data.Dataset):

    def __init__(self,
                 data, target,
                 width: int = 32,
                 ) -> None:
        self.width = width
        self.data: any = []
        self.data = data.transpose((0, 3, 1, 2))
        self.targets = target
        # if self.train == 'train':
        #     self.data = X
        #     self.targets = y
        # else:
        #     self.data = X_test
        #     self.targets = y_test

        print(f'Data Loading Finished. len : {len(self.data)}')


    def __getitem__(self, index: int) -> tuple[any, any]:
        """
        Args:
            index (int): Index

        Returns:
            tuple: (image, target) where target is index of the target class.
        """
        img, target = self.data[index], self.targets[index]

        return img, target

    def __len__(self) -> int:
        return len(self.data)

dr_train = DRDataset(X, y, width=32)
dr_test = DRDataset(X_test, y_test, width=32)


batch_size = 128
train_loader = DataLoader(dr_train, batch_size, shuffle=True, pin_memory=True)
test_loader = DataLoader(dr_test, batch_size, shuffle=True, pin_memory=True)
# train_loader = DataLoader(datasets.CIFAR10("./", train=True, transform=transforms.ToTensor(), download=True), batch_size=128, shuffle=True)
# test_loader = DataLoader(datasets.CIFAR10("./", train=False, transform=transforms.ToTensor(), download=True), batch_size=128, shuffle=True)

def get_default_device():
    """Pick GPU if available, else CPU"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')

def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    """Wrap a dataloader to move data to a device"""
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device

    def __iter__(self):
        """Yield a batch of data after moving it to device"""
        for b in self.dl:
            yield to_device(b, self.device)

    def __len__(self):
        """Number of batches"""
        return len(self.dl)


print(f"Training images {len(train_loader.dataset)}, Test images {len(test_loader.dataset)}")
# exit()

class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, in_planes, planes, conv_layer, stride=1):
        super(BasicBlock, self).__init__()
        self.conv1 = conv_layer(
            in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False
        )
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = conv_layer(
            planes, planes, kernel_size=3, stride=1, padding=1, bias=False
        )
        self.bn2 = nn.BatchNorm2d(planes)

        self.shortcut = nn.Sequential()
        if stride != 1 or in_planes != self.expansion * planes:
            self.shortcut = nn.Sequential(
                conv_layer(
                    in_planes,
                    self.expansion * planes,
                    kernel_size=1,
                    stride=stride,
                    bias=False,
                ),
                nn.BatchNorm2d(self.expansion * planes),
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += self.shortcut(x)
        out = F.relu(out)
        return out


class ResNet(nn.Module):
    def __init__(self, conv_layer, linear_layer, block, num_blocks, num_classes=10):
        super(ResNet, self).__init__()
        self.in_planes = 64
        self.conv_layer = conv_layer

        self.conv1 = conv_layer(3, 64, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.layer1 = self._make_layer(block, 64, num_blocks[0], stride=1)
        self.layer2 = self._make_layer(block, 128, num_blocks[1], stride=2)
        self.layer3 = self._make_layer(block, 256, num_blocks[2], stride=2)
        self.layer4 = self._make_layer(block, 512, num_blocks[3], stride=2)
        self.linear = linear_layer(512 * block.expansion, num_classes)

    def _make_layer(self, block, planes, num_blocks, stride):
        strides = [stride] + [1] * (num_blocks - 1)
        layers = []
        for stride in strides:
            layers.append(block(self.in_planes, planes, self.conv_layer, stride))
            self.in_planes = planes * block.expansion
        return nn.Sequential(*layers)

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = F.avg_pool2d(out, 4)
        out = out.view(out.size(0), -1)
        out = self.linear(out)
        return out


# NOTE: Only supporting default (kaiming_init) initializaition.
def resnet18(conv_layer, linear_layer, init_type, **kwargs):
    assert init_type == "kaiming_normal", "only supporting default init for Resnets"
    return ResNet(conv_layer, linear_layer, BasicBlock, [2, 2, 2, 2], num_classes=5, **kwargs)

model = resnet18(nn.Conv2d, nn.Linear, "kaiming_normal").cuda()
print(model)


device = get_default_device()

train_dl = DeviceDataLoader(train_loader, device)
to_device(model, device)
for images, labels in train_dl:
    print('images.shape:', images.shape)
    out = model(images.float())
    print('out.shape:', out.shape)
    break
# exit()
epochs = 5
lr = 0.1
# lr_set = [3, 4, 6, 8, 10]
lr_set = [9, 9, 9, 9, 10]
lr_set = [2 ** -x for x in lr_set]
#lr_set = [0.125, 0.0625, 0.03125, 0.015625, 0.0078125]
#lr_set = [0.0078125, 0.015625, 0.25, 0.0625, 0.015625]

optimizer = optim.SGD(model.parameters(), lr=lr)
criterion = nn.CrossEntropyLoss()
lrs = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, epochs)

"""### let's start training"""

def get_acc(model, loader):
  correct = 0
  total = 0
  for img, label in loader:
    correct += torch.sum(torch.argmax(model(img.float().cuda()), -1).cpu() == label).item()
    total += len(img)
  return 100*correct/total

for e in range(epochs):
  optimizer.param_groups[0]["lr"] = lr_set[e]
  print("lr", optimizer.param_groups[0]["lr"])
  for img, label in train_loader:
    out = model(img.float().cuda())
    
    optimizer.zero_grad()
    loss = criterion(out, label.cuda())
    loss.backward()
    optimizer.step()
  lrs.step()
  print(f"Epoch {e}, training accuracy {get_acc(model, train_loader)}, test accuracy {get_acc(model, test_loader)}")
